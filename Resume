<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width,initial-scale=1" />
  <title>Enhanced Resume Builder</title>

  <!-- Google Fonts -->
  <link href="https://fonts.googleapis.com/css2?family=Open+Sans:wght@300;400;600;700&family=Poppins:wght@300;400;600;700&family=Roboto:wght@300;400;500;700&display=swap" rel="stylesheet">

  <!-- Font Awesome for Icons -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" crossorigin="anonymous" referrerpolicy="no-referrer" />

  <!-- html2pdf CDN -->
  <script src="https://cdnjs.cloudflare.com/ajax/libs/html2pdf.js/0.9.3/html2pdf.bundle.min.js"></script>
  <style>
:root{
      --bg:#f4f6fb;
      --card:#fff;
      --muted:#6b7280;
      --accent:#0f62fe;
      --shadow: 0 6px 18px rgba(11, 22, 39, 0.06);
      --max-width:1200px;
      --border-light: #e6e9ef;
      --border-dash: #eef2ff;
      --text-dark: #111827;
      --text-light: #f9fafb;
    }
    *{box-sizing:border-box}
    body{
      margin:0;
      font-family: "Open Sans", system-ui, -apple-system, "Segoe UI", Roboto, "Helvetica Neue", Arial;
      background:var(--bg);
      color:var(--text-dark);
      -webkit-font-smoothing:antialiased;
      -moz-osx-font-smoothing:grayscale;
      padding:24px;
      display:flex;
      justify-content:center;
    }

    .app{
      width:100%;
      max-width:var(--max-width);
      display:grid;
      grid-template-columns: 420px 1fr;
      gap:20px;
      align-items:start;
    }

    /* LEFT: Form controls */
    .panel{
      background:var(--card);
      border-radius:12px;
      padding:18px;
      box-shadow:var(--shadow);
      height:calc(100vh - 48px);
      overflow-y:auto; /* Changed to auto for scrollbar only when needed */
      display:flex; /* Use flex for internal layout */
      flex-direction:column;
    }
    h2{margin:0 0 12px 0;font-size:20px; color:var(--accent)} /* Larger, accented title */
    .panel h3{font-size:16px; margin:20px 0 10px 0; color:var(--text-dark); border-bottom:1px solid var(--border-light); padding-bottom:8px;} /* Clearer section titles */
    label{display:block;font-size:13px;margin-top:10px;color:var(--muted); font-weight:600;} /* Bold labels */
    input[type="text"], input[type="email"], input[type="tel"], textarea, select{
      width:100%;
      padding:10px 12px;
      margin-top:6px;
      border-radius:8px;
      border:1px solid var(--border-light);
      font-size:14px;
      background: #fafbff;
      transition:border-color 0.2s, box-shadow 0.2s;
    }
    input[type="text"]:focus, input[type="email"]:focus, input[type="tel"]:focus, textarea:focus, select:focus{
      outline:none;
      border-color:var(--accent);
      box-shadow:0 0 0 3px rgba(15,98,254,0.1);
    }
    textarea{min-height:76px; resize:vertical;}
    .row{display:flex;gap:8px}
    .small{flex:1}
    .section{
      margin-top:14px;
      padding-top:12px;
      /* border-top:1px dashed var(--border-dash); */ /* Removed as h3 creates separation */
    }
    .controls{display:flex; gap:8px; margin-top:16px; flex-wrap:wrap; align-items:center;} /* Better spacing for buttons */
    button{
      padding:10px 14px;
      border-radius:8px;
      border:0;
      font-weight:600;
      cursor:pointer;
      transition:transform 0.1s ease, background 0.2s, color 0.2s, box-shadow 0.2s;
      display:inline-flex;
      align-items:center;
      gap:6px;
    }
    button:hover{transform:translateY(-1px);}
    .btn-primary{background:var(--accent); color:#fff; box-shadow:0 6px 14px rgba(15,98,254,0.12)}
    .btn-primary:hover{filter:brightness(0.95);}
    .btn-ghost{background:transparent; border:1px solid var(--border-light); color:var(--text-dark)}
    .btn-ghost:hover{background:var(--bg);}

    /* Dynamic section styling */
    .dynamic-item {
        background: #f9fbfd;
        border: 1px solid var(--border-light);
        border-radius: 8px;
        padding: 12px;
        margin-bottom: 12px;
        position: relative; /* For positioning remove button */
    }
    .dynamic-item-controls {
        display: flex;
        justify-content: flex-end; /* Align to right */
        gap: 8px;
        margin-top: 10px;
    }
    .btn-add {
        padding: 8px 12px;
        font-size: 13px;
        font-weight: 600;
        border-radius: 6px;
        cursor: pointer;
        border: 1px solid var(--accent);
        background: var(--card);
        color: var(--accent);
        transition: all 0.2s ease;
        margin-top:10px;
    }
    .btn-add:hover {
        background: #e9f0ff;
    }
    .btn-remove {
        position: absolute; /* Position relative to dynamic-item */
        top: 10px;
        right: 10px;
        padding: 4px 8px; /* Smaller padding */
        font-size: 11px;
        border-radius: 5px;
        cursor: pointer;
        border: 1px solid #fca5a5; /* Light red border */
        background: #fee2e2; /* Light red background */
        color: #ef4444; /* Red for remove */
        transition: all 0.2s ease;
        line-height: 1; /* Keep icon centered */
    }
    .btn-remove:hover {
        background: #fecaca; /* Slightly darker red on hover */
        border-color: #ef4444;
    }
    .btn-icon { /* Style for icon-only buttons */
      padding: 6px 8px;
      width: 30px;
      height: 30px;
      display: inline-flex;
      justify-content: center;
      align-items: center;
    }
    .btn-icon i {
      font-size: 14px;
    }

    /* RIGHT: Preview area */
    .preview-wrap{
      display:flex;
      flex-direction:column;
      gap:12px;
      height:calc(100vh - 48px);
      overflow:hidden; /* Prevent scrollbar on wrapper */
    }
    .preview-top{display:flex;justify-content:space-between;gap:8px;align-items:center}
    .preview{
      background:var(--card); padding:22px; border-radius:12px; box-shadow:var(--shadow); overflow-y:auto; flex:1; /* Only vertical scroll */
      min-height:640px;
      width:100%;
    }

    /* Template container common classes */
    .resume{
      width:210mm; /* A4 width for PDF */
      max-width:780px; /* Max width for preview */
      margin: 0 auto;
      color:var(--text-dark);
      background:transparent;
      height:297mm; /* Fixed A4 height */
      padding: 10mm; /* Internal padding for A4 */
    }
    .r-header{display:flex;align-items:center;gap:16px}
    .r-name{font-weight:700}
    .r-contact{font-size:13px; color:var(--muted); word-break: break-all;} /* Allow links to break */
    .r-contact a {color:var(--muted); text-decoration: none;}
    .r-contact a:hover {text-decoration: underline;}
    .section-title{margin-top:18px;font-weight:700;font-size:16px; padding-bottom:4px; border-bottom:1px solid var(--border-light); margin-bottom:10px;} /* Stronger section titles */
    .muted{color:var(--muted);font-size:13px}
    ul{margin:6px 0 0 20px; padding:0; list-style-type:disc;} /* Bullet points */
    ul li {margin-bottom:4px; padding-left: 0;} /* No extra padding for li */
    .item-title{font-weight:600; margin-bottom:2px;}
    .small-muted{font-size:13px;color:#6b7280; line-height:1.4;}
    .line{height:1px;background:#e6e9ef;margin:12px 0;border-radius:2px}

    .resume-item { margin-bottom: 12px; }
    .resume-item:last-child { margin-bottom: 0; }
    .resume-item.no-content { display: none; } /* Hide empty dynamic items in preview */

    /* TEMPLATE 1 — Classic (Times-like feel) */
    .tpl-classic{
      font-family: "Times New Roman", Times, serif;
    }
    .tpl-classic .r-name{font-size:28px}
    .tpl-classic .section-title{font-size:17px;border-bottom:2px solid #e6e9ef;padding-bottom:6px}
    .tpl-classic ul{list-style-type:circle;} /* Classic specific bullet style */

    /* TEMPLATE 2 — Modern (Open Sans) */
    .tpl-modern{
      font-family: "Open Sans", Arial, sans-serif;
      color:#0f1724;
    }
    .tpl-modern .r-name{font-size:26px; color:#0f1724}
    .tpl-modern .r-head{display:flex;justify-content:space-between;align-items:flex-start}
    .tpl-modern .section-title{color:var(--accent); border-bottom:none;}
    .tpl-modern ul{list-style-type:square;}

    /* TEMPLATE 3 — Elegant (Georgia) */
    .tpl-elegant{
      font-family: Georgia, "Times New Roman", serif;
      color:#111827;
    }
    .tpl-elegant .r-name{font-size:26px; border-bottom:1px solid var(--border-light); padding-bottom:5px; margin-bottom:5px;}
    .tpl-elegant .r-contact{margin-top:0 !important;}
    .tpl-elegant .section-title{font-size:16px; color:#374151; border-left:4px solid #374151; padding-left:8px; border-bottom:none;}
    .tpl-elegant ul{list-style-type:disclosure-closed;}

    /* TEMPLATE 4 — Creative (Poppins + color) */
    .tpl-creative{
      font-family: "Poppins", "Open Sans", sans-serif;
      color:#0b1020;
    }
    .tpl-creative .r-name{font-size:28px; color:#111827}
    .tpl-creative .header-accent{background:#f59e0b;padding:8px 12px;border-radius:8px;color:white;font-weight:700; display:inline-block; margin-bottom:10px;}
    .tpl-creative .section-title{color:var(--accent); border-bottom:2px solid var(--accent); padding-bottom:5px; margin-bottom:10px;}
    .tpl-creative ul{list-style-type:circle;} /* Use circle for creative */

    /* TEMPLATE 5 — Compact (Roboto, tighter spacing) */
    .tpl-compact{
      font-family: "Roboto", sans-serif;
      font-size:13px;
      color:#0f1724;
    }
    .tpl-compact .r-name{font-size:22px}
    .tpl-compact .section-title{font-size:14px;margin-top:10px; border-bottom:1px solid #ddd; padding-bottom:4px; margin-bottom:8px;}
    .tpl-compact ul{margin:4px 0 0 16px;}
    .tpl-compact .resume-item { margin-bottom: 8px; }


    /* small responsive tweaks */
    @media (max-width:980px){
      .app{grid-template-columns:1fr; padding-bottom:40px; gap:16px;}
      .panel{height:auto; max-height:600px; padding:16px; border-radius:8px;} /* Adjust max-height and padding */
      .preview-wrap{height:auto;}
      .preview{padding:16px; min-height:400px; border-radius:8px;}
      .resume{max-width:100%; width:100%; padding: 8mm;} /* Adjust A4 padding on small screens */
      body{padding:16px;}
      h2{font-size:18px;}
      .panel h3{font-size:15px;}
      button{padding:8px 12px; font-size:13px;}
      .btn-icon{width:28px; height:28px;}
      .btn-icon i{font-size:12px;}
    }

    /* Preview-only mode: hide side panels and center the A4 preview */
    .app.preview-only .panel { display: none !important; }
    .app.preview-only { grid-template-columns: 1fr !important; }
    .app.preview-only .preview-wrap{
      height:100vh;
      align-items:center;
      justify-content:center;
      padding:20px;
    }
    /* hide preview header in preview-only mode for clearer view */
    .app.preview-only .preview-top { display: none !important; }
    .app.preview-only .preview{
      background: transparent; /* let resume show cleanly */
      box-shadow: none;
      overflow:auto; /* allow panning/scroll when zoomed */
      display:flex;
      /* align to start so scaled resume won't be clipped at the top on small screens */
      align-items:flex-start;
      justify-content:center;
      padding-top:18px; /* give some breathing room from top so hint/controls don't overlap */
    }
    /* temporary hint overlay shown when entering preview-only */
    .preview-hint{
      position:fixed;
      top:18px;
      left:50%;
      transform:translateX(-50%) translateY(-8px);
      background:rgba(0,0,0,0.78);
      color:#fff;
      padding:8px 12px;
      border-radius:8px;
      font-size:13px;
      z-index:9999;
      opacity:0;
      pointer-events:none;
      transition:opacity 220ms ease, transform 220ms ease;
    }
    .preview-hint.show{ opacity:1; transform:translateX(-50%) translateY(0); }
  /* stronger visual separation for the resume when centered */
  .preview .resume{ box-shadow: 0 10px 30px rgba(11,22,39,0.18); background: #fff; border-radius:4px; max-height:calc(100vh - 48px); }
  /* allow smooth scaling for fit-to-screen behavior; use center origin to avoid clipping when scaled */
  .preview .resume { transform-origin: center top; transition: transform 220ms ease; }
  </style>
</head>
<body>
  <div class="app">
    <!-- LEFT: Controls -->
    <div class="panel" id="controls">
      <h2>Resume Builder</h2>

      <label for="templateSelect">Choose Template</label>
      <select id="templateSelect">
        <option value="classic">Template 1 — Classic (Serif, Formal)</option>
        <option value="modern">Template 2 — Modern (Sans-serif, Clean)</option>
        <option value="elegant">Template 3 — Elegant (Serif, Sophisticated)</option>
        <option value="creative">Template 4 — Creative (Poppins, Accented)</option>
        <option value="compact">Template 5 — Compact (Roboto, Concise)</option>
        <option value="professional">Template 6 — Professional Sidebar</option>
      </select>

      <h3>Personal Details</h3>
      <div class="section">
        <label for="name">Full Name</label>
        <input id="name" type="text" placeholder="e.g., Priya Sharma" />

  <!-- Professional Title removed per request -->

          <label style="margin-top:12px">Photo</label>
          <div style="display:flex;gap:8px;align-items:center;">
            <input id="photoInput" type="file" accept="image/*" style="flex:1" />
            <button id="removePhotoBtn" class="btn-ghost" title="Remove photo" type="button">Remove</button>
          </div>
          <div id="photoPreview" style="margin-top:8px;"></div>

        <div class="row">
          <div class="small">
            <label for="email">Email</label>
            <input id="email" type="email" placeholder="name@example.com" />
          </div>
          <div class="small">
            <label for="phone">Phone</label>
            <input id="phone" type="tel" placeholder="+91 99999 99999" />
          </div>
        </div>

        <label for="location">Location (City, Country)</label>
        <input id="location" type="text" placeholder="Bengaluru, India" />

        <label for="links">Links (LinkedIn, Portfolio, GitHub - comma-separated)</label>
        <input id="links" type="text" placeholder="linkedin.com/in/you, github.com/you" />

        <label for="summary" style="margin-top:20px;">About / Professional Summary</label>
        <textarea id="summary" placeholder="A concise (2-3 lines) summary of your skills and aspirations."></textarea>
      </div>

      <h3>Education</h3>
      <div class="section" id="educationSection">
        <!-- Education items will be injected here -->
        <button class="btn-add" data-section="education"><i class="fas fa-plus"></i> Add Education</button>
      </div>

      <h3>Experience / Internships</h3>
      <div class="section" id="experienceSection">
        <!-- Experience items will be injected here -->
        <button class="btn-add" data-section="experience"><i class="fas fa-plus"></i> Add Experience</button>
      </div>

      <h3>Projects</h3>
      <div class="section" id="projectsSection">
        <!-- Project items will be injected here -->
        <button class="btn-add" data-section="projects"><i class="fas fa-plus"></i> Add Project</button>
      </div>

      <h3>Skills & Certifications</h3>
      <div class="section">
        <label for="technicalSkills">Technical Skills (comma separated)</label>
        <input id="technicalSkills" type="text" placeholder="Python, C, React, Git, Machine Learning" />

        <label for="softSkills">Soft Skills (comma separated)</label>
        <input id="softSkills" type="text" placeholder="Teamwork, Communication, Problem-solving" />

        <label>Languages</label>
        <div class="section" id="languagesSection">
          <!-- Language items will be injected here -->
          <button class="btn-add" data-section="languages"><i class="fas fa-plus"></i> Add Language</button>
        </div>

        <label for="certsAwards" style="margin-top:20px;">Certifications / Awards (comma separated)</label>
        <input id="certsAwards" type="text" placeholder="AWS Cloud Practitioner; Hackathon Winner 2023" />
      </div>

      <div class="controls">
        <button class="btn-primary" id="downloadBtn"><i class="fas fa-download"></i> Download PDF</button>
        <button class="btn-ghost" id="saveBtn"><i class="fas fa-save"></i> Save (Local)</button>
        <button class="btn-ghost" id="clearBtn"><i class="fas fa-trash-alt"></i> Clear All</button>
        <button class="btn-ghost" id="previewToggleBtn" title="Enter preview-only mode" type="button"><i class="fas fa-eye"></i> Preview only</button>
      </div>
      <!-- Filename preview and tip removed per request -->
    </div>

    <!-- RIGHT: Preview -->
    <div class="preview-wrap">
      <div class="preview-top">
        <div style="font-size:14px;color:var(--text-dark);font-weight:700">Live Preview</div>
        <div style="color:var(--muted);font-size:13px">A4 / PDF friendly • Choose template then Download</div>
      </div>

      <div class="preview" id="previewArea">
        <!-- The resume preview will be injected here -->
        <div id="resume" class="resume tpl-classic" role="document">
          <!-- Default content structure for dynamic updates -->
          <div class="r-header r-head">
            <div>
              <div class="r-name" id="r_name">Your Name</div>
              <div style="margin-top:8px" class="r-contact" id="r_contact">email • phone • location</div>
            </div>
          </div>

          <div class="line"></div>

          <div id="r_summary" class="muted">A brief summary about yourself, highlighting key skills and career goals.</div>

          <div class="section-title">Education</div>
          <div id="r_education_items">
            <!-- Dynamic education items will render here -->
            <div class="resume-item muted" data-placeholder-type="education">
              <div class="item-title">University Name — Degree (Years)</div>
              <div class="small-muted">CGPA, key coursework, relevant achievements.</div>
            </div>
          </div>

          <div class="section-title">Experience</div>
          <div id="r_experience_items">
            <!-- Dynamic experience items will render here -->
            <div class="resume-item muted" data-placeholder-type="experience">
              <div class="item-title">Role — Company (Dates)</div>
              <div class="small-muted">
                <ul>
                  <li>Accomplishment 1</li>
                  <li>Accomplishment 2</li>
                </ul>
              </div>
            </div>
          </div>

          <div class="section-title">Projects</div>
          <div id="r_projects_items">
            <!-- Dynamic project items will render here -->
            <div class="resume-item muted" data-placeholder-type="project">
              <div class="item-title">Project Title — Technologies Used</div>
              <div class="small-muted">Short description of project, impact, and a link (if any).</div>
            </div>
          </div>

          <div class="section-title">Skills & Certifications</div>
          <div id="r_skills_certs_section">
            <div class="resume-item" id="r_skills_technical"><b>Technical Skills:</b> Python • C • React</div>
            <div class="resume-item" id="r_skills_soft"><b>Soft Skills:</b> Teamwork • Communication</div>
            <div class="resume-item" id="r_certs_awards"><b>Certifications & Awards:</b> AWS Cloud Practitioner</div>
          </div>

          <div class="section-title">Languages</div>
          <div id="r_languages_section">
            <div class="resume-item" id="r_skills_languages"><b>Languages:</b> English • Hindi</div>
          </div>

        </div>
        <!-- ✅ TEMPLATE 6 : Professional Sidebar -->
        <div id="template6" class="resume tpl-professional" style="display:none; width:210mm; max-width:780px;" role="document">
          <div class="resume-wrapper" style="display:flex; min-height:100%;">
            <!-- LEFT SIDEBAR -->
            <div class="left-bar" style="width:35%; background:#f5f7fb; padding:30px 25px; display:flex; flex-direction:column; align-items:center;">
              <img id="photo6" src="" alt="Profile Photo" style="width:130px;height:130px;border-radius:50%;object-fit:cover;margin-bottom:20px;">
              <h2 id="name6" style="font-size:22px;text-align:center;margin:0 0 5px;color:#333;"></h2>
              <h4 id="title6" style="font-size:14px;text-align:center;margin:0 0 25px;color:#777;"></h4>

              <section style="width:100%;">
                <h3 style="font-size:15px;color:#2d3e50;margin-bottom:8px;">Contact</h3>
                <p id="email6" style="margin:2px 0;font-size:13px;color:#555;"></p>
                <p id="phone6" style="margin:2px 0;font-size:13px;color:#555;"></p>
                <p id="address6" style="margin:2px 0;font-size:13px;color:#555;"></p>
              </section>

              <section style="width:100%;margin-top:18px;">
                <h3 style="font-size:15px;color:#2d3e50;margin-bottom:8px;">Education</h3>
                <div id="edu6" style="font-size:13px;color:#555;"></div>
              </section>

              <section style="width:100%;margin-top:18px;">
                <h3 style="font-size:15px;color:#2d3e50;margin-bottom:8px;">Skills</h3>
                <ul id="skills6" style="list-style:none;padding:0;margin:0;color:#555;font-size:13px;"></ul>
              </section>

              <section style="width:100%;margin-top:18px;">
                <h3 style="font-size:15px;color:#2d3e50;margin-bottom:8px;">Languages</h3>
                <ul id="languages6" style="list-style:none;padding:0;margin:0;color:#555;font-size:13px;"></ul>
              </section>
            </div>

            <!-- RIGHT CONTENT with dark background -->
            <div class="right-bar" style="width:65%; background:#1e2a38; color:#f0f0f0; padding:40px 35px; display:flex; flex-direction:column;">

              <section>
                <h2 style="font-size:20px;border-bottom:2px solid #3a4a5b;padding-bottom:5px;margin-bottom:10px;color:#f0f0f0;">About Me</h2>
                <p id="about6" style="font-size:14px;line-height:1.5;margin:0 0 20px;color:#f0f0f0;"></p>
              </section>

              <section>
                <h2 style="font-size:20px;border-bottom:2px solid #3a4a5b;padding-bottom:5px;margin-bottom:10px;color:#f0f0f0;">Experience</h2>
                <div id="exp6" style="font-size:14px;line-height:1.5;margin:0 0 20px;color:#f0f0f0;"></div>
              </section>

              <section>
                <h2 style="font-size:20px;border-bottom:2px solid #3a4a5b;padding-bottom:5px;margin-bottom:10px;color:#f0f0f0;">Projects</h2>
                <div id="proj6" style="font-size:14px;line-height:1.5;margin:0 0 20px;color:#f0f0f0;"></div>
              </section>

              <section>
                <h2 style="font-size:20px;border-bottom:2px solid #3a4a5b;padding-bottom:5px;margin-bottom:10px;color:#f0f0f0;">Certifications</h2>
                <div id="cert6" style="font-size:14px;line-height:1.5;margin:0 0 20px;color:#f0f0f0;"></div>
              </section>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
  <!-- Temporary preview hint overlay -->
  <div id="previewHint" class="preview-hint" aria-hidden="true">Exit preview — Esc</div>

  <script>
  console.log("Afroj"); // replaced alert with console.log to avoid popup on load

  // ---------- Utilities ----------
  const els = id => document.getElementById(id);

  // Initial Resume Data Structure
  let resumeData = {
    name: '',
    email: '',
    phone: '',
    location: '',
    links: '',
    summary: '',
    education: [], // Now an array for dynamic entries
    experience: [], // Now an array for dynamic entries
    projects: [], // Now an array for dynamic entries
    technicalSkills: '',
    softSkills: '',
    // languages is now an array of {name, level}
    languages: [],
    // Photo stored as data URL when uploaded
    photo: '',
    certsAwards: '',
    templateSelect: 'classic'
  };

  // Placeholder content for empty fields
  const placeholders = {
    name: 'Your Name',
    title: 'Professional Title',
    summary: 'A brief summary about yourself, highlighting key skills and career goals.',
    educationTitle: 'University Name — Degree (Years)',
    educationDesc: 'CGPA, key coursework, relevant achievements.',
    experienceTitle: 'Role — Company (Dates)',
    experienceDesc: 'Main responsibilities and achievements\nQuantifiable results preferred',
    projectTitle: 'Project Title — Technologies Used',
    projectDesc: 'Short description of project, impact, and a link (if any).',
    technicalSkills: 'Python • C • React',
    softSkills: 'Teamwork • Communication',
    languages: 'English • Hindi',
    certsAwards: 'AWS Cloud Practitioner'
  };

  const STORAGE_KEY = 'enhanced_resume_builder_data_v2'; // Updated storage key

  // Helper to format text into bullet points if newlines are present
  function formatBulletPoints(text) {
    if (!text) return '';
    const lines = text.split('\n').filter(line => line.trim() !== '');
    if (lines.length > 0) {
      return `<ul>${lines.map(line => `<li>${line.trim()}</li>`).join('')}</ul>`;
    }
    return text;
  }

  // Helper to create a safe filename from the entered name
  function sanitizeFilename(name){
    if(!name) return 'My_Resume';
    // Remove characters not safe for filenames, trim, replace spaces with underscores
    return name.trim().replace(/\s+/g,'_').replace(/[^a-zA-Z0-9_\-\.]/g,'') || 'My_Resume';
  }

  // Helper to return YYYY-MM-DD date string
  function todayDateString(){
    const d = new Date();
    const yyyy = d.getFullYear();
    const mm = String(d.getMonth()+1).padStart(2,'0');
    const dd = String(d.getDate()).padStart(2,'0');
    return `${yyyy}-${mm}-${dd}`;
  }

  // Build filename using selected format and optional timestamp
  function buildFilename({name, title, format, addDateSuffix=true}){
    const safeName = sanitizeFilename(name) || 'My_Resume';
    const safeTitle = sanitizeFilename(title) || '';
    let base = safeName;
    if(format === 'name_title' && safeTitle) base = `${safeName}_${safeTitle}`;
    if(format === 'name_date') base = `${safeName}_${todayDateString()}`;
    if(format === 'name_title_date' && safeTitle) base = `${safeName}_${safeTitle}_${todayDateString()}`;
    // If format is 'name' but addDateSuffix true, append date to avoid overwrites
    if(format === 'name' && addDateSuffix) base = `${base}_${todayDateString()}`;
    return `${base}.pdf`;
  }

  // Function to update the preview from resumeData
  function updatePreview() {
    // Personal Details
  els('r_name').textContent = resumeData.name || placeholders.name;
        
    const contactParts = [];
    if (resumeData.email) contactParts.push(resumeData.email);
    if (resumeData.phone) contactParts.push(resumeData.phone);
    if (resumeData.location) contactParts.push(resumeData.location);
    if (resumeData.links) {
      const linkHtml = resumeData.links.split(',').map(link => {
        const trimmedLink = link.trim();
        if (!trimmedLink) return '';
        // Basic URL validation
        const urlRegex = /^(https?:\/\/(?:www\.|(?!www))[a-zA-Z0-9][a-zA-Z0-9-]+[a-zA-Z0-9]\.[^\s]{2,}|www\.[a-zA-Z0-9][a-zA-Z0-9-]+[a-zA-Z0-9]\.[^\s]{2,}|https?:\/\/[a-zA-Z0-9]+\.[^\s]{2,}|[a-zA-Z0-9]+\.[^\s]{2,})$/i;
        const displayLink = urlRegex.test(trimmedLink) ? new URL(trimmedLink.startsWith('http') ? trimmedLink : `https://${trimmedLink}`).hostname.replace('www.','') : trimmedLink;
        const fullLink = trimmedLink.startsWith('http') ? trimmedLink : `https://${trimmedLink}`;
        return `<a href="${fullLink}" target="_blank" rel="noopener noreferrer">${displayLink}</a>`;
      }).filter(Boolean).join(' • ');
      if(linkHtml) contactParts.push(linkHtml);
    }
        
    els('r_contact').innerHTML = contactParts.join("  •  ") || 'email • phone • location • links';
    els('r_summary').textContent = resumeData.summary || placeholders.summary;

    // Dynamic Sections: Education, Experience, Projects
    ['education', 'experience', 'projects'].forEach(sectionType => {
      const previewContainer = els(`r_${sectionType}_items`);
      previewContainer.innerHTML = ''; // Clear existing

      if (resumeData[sectionType].length === 0 || resumeData[sectionType].every(item => !item.title && !item.description)) {
        // Show placeholder if no items or all items are empty
        const placeholderDiv = document.createElement('div');
        placeholderDiv.className = 'resume-item muted';
        placeholderDiv.setAttribute('data-placeholder-type', sectionType);
        if (sectionType === 'education') {
          placeholderDiv.innerHTML = `<div class="item-title">${placeholders.educationTitle}</div><div class="small-muted">${formatBulletPoints(placeholders.educationDesc)}</div>`;
        } else if (sectionType === 'experience') {
          placeholderDiv.innerHTML = `<div class="item-title">${placeholders.experienceTitle}</div><div class="small-muted">${formatBulletPoints(placeholders.experienceDesc)}</div>`;
        } else if (sectionType === 'projects') {
          placeholderDiv.innerHTML = `<div class="item-title">${placeholders.projectTitle}</div><div class="small-muted">${formatBulletPoints(placeholders.projectDesc)}</div>`;
        }
        previewContainer.appendChild(placeholderDiv);
      } else {
        resumeData[sectionType].forEach(item => {
          if (item.title || item.description) {
            const div = document.createElement('div');
            div.className = 'resume-item';
            let descContent = item.description ? formatBulletPoints(item.description) : '';

            if (sectionType === 'education') {
               div.innerHTML = `<div class="item-title">${item.title || placeholders.educationTitle}</div><div class="small-muted">${descContent || placeholders.educationDesc}</div>`;
            } else if (sectionType === 'experience') {
               div.innerHTML = `<div class="item-title">${item.title || placeholders.experienceTitle}</div><div class="small-muted">${descContent || placeholders.experienceDesc}</div>`;
            } else if (sectionType === 'projects') {
              div.innerHTML = `<div class="item-title">${item.title || placeholders.projectTitle}</div><div class="small-muted">${descContent || placeholders.projectDesc}</div>`;
            }
            previewContainer.appendChild(div);
          }
        });
      }
    });

    // Skills & Certifications
    const rSkillsTechnical = els('r_skills_technical');
    rSkillsTechnical.innerHTML = resumeData.technicalSkills ? `<b>Technical Skills:</b> ${resumeData.technicalSkills.split(',').map(s=>s.trim()).filter(Boolean).join(' • ')}` : `<b>Technical Skills:</b> ${placeholders.technicalSkills}`;
    rSkillsTechnical.style.display = resumeData.technicalSkills ? 'block' : 'none';

    const rSkillsSoft = els('r_skills_soft');
    rSkillsSoft.innerHTML = resumeData.softSkills ? `<b>Soft Skills:</b> ${resumeData.softSkills.split(',').map(s=>s.trim()).filter(Boolean).join(' • ')}` : `<b>Soft Skills:</b> ${placeholders.softSkills}`;
    rSkillsSoft.style.display = resumeData.softSkills ? 'block' : 'none';

    const rSkillsLanguages = els('r_skills_languages');
    const rLanguagesSection = els('r_languages_section');
    if (rSkillsLanguages && rLanguagesSection) {
      if (Array.isArray(resumeData.languages) && resumeData.languages.length > 0) {
        // Render as chips: "English — Fluent"
        const items = resumeData.languages.map(l => {
          const n = (l && l.name) ? l.name.trim() : '';
          const lev = (l && l.level) ? l.level.trim() : '';
          return n ? `${n}${lev ? ' — ' + lev : ''}` : null;
        }).filter(Boolean);
        rSkillsLanguages.innerHTML = items.length ? `<b>Languages:</b> ${items.join(' • ')}` : `<b>Languages:</b> ${placeholders.languages}`;
        rLanguagesSection.style.display = items.length ? 'block' : 'none';
      } else {
        // fallback to placeholders
        rSkillsLanguages.innerHTML = `<b>Languages:</b> ${placeholders.languages}`;
        rLanguagesSection.style.display = 'none';
      }
    }

    const rCertsAwards = els('r_certs_awards');
    rCertsAwards.innerHTML = resumeData.certsAwards ? `<b>Certifications & Awards:</b> ${resumeData.certsAwards.split(';').map(s=>s.trim()).filter(Boolean).join(' • ')}` : `<b>Certifications & Awards:</b> ${placeholders.certsAwards}`;
    rCertsAwards.style.display = resumeData.certsAwards ? 'block' : 'none';

    // If all skill/certs are empty, hide the section title in preview
   const rSkillsCertsSection = els('r_skills_certs_section');
   const skillsCertsSectionTitle = rSkillsCertsSection.previousElementSibling; // This is the h3 before the skills section
   const hasSkillsCertsContent = resumeData.technicalSkills || resumeData.softSkills || (Array.isArray(resumeData.languages) && resumeData.languages.length>0) || resumeData.certsAwards;
    if (skillsCertsSectionTitle && skillsCertsSectionTitle.classList.contains('section-title')) {
       skillsCertsSectionTitle.style.display = hasSkillsCertsContent ? 'block' : 'none';
    }

    // ------------ TEMPLATE 6 population and visibility ------------
    applyTemplateSelection();

    const tpl6El = els('template6');
    const mainResumeEl = els('resume');
    // (tpl visibility already handled in applyTemplateSelection)

      // Fill template 6 fields
  els('name6').textContent = resumeData.name || placeholders.name;
      // title may not exist in data (user removed professional title), attempt to use first education/role fallback
      els('title6').textContent = resumeData.title || '';
      els('email6').textContent = resumeData.email || '';
      els('phone6').textContent = resumeData.phone || '';
      els('address6').textContent = resumeData.location || '';

      // Photo
      const photo6 = els('photo6');
      if (photo6) {
        if (resumeData.photo) {
          photo6.src = resumeData.photo;
          photo6.style.display = 'block';
        } else {
          photo6.src = '';
          photo6.style.display = 'none';
        }
      }

      // Education: join first few education titles
      const edu6 = els('edu6');
      if (edu6) {
        if (Array.isArray(resumeData.education) && resumeData.education.length>0) {
          edu6.innerHTML = resumeData.education.map(e => e.title || '').filter(Boolean).join('<br>');
        } else {
          edu6.innerHTML = placeholders.educationTitle;
        }
      }

      // Skills list
      const skills6 = els('skills6');
      if (skills6) {
        const tech = resumeData.technicalSkills ? resumeData.technicalSkills.split(',').map(s=>s.trim()).filter(Boolean) : [];
        skills6.innerHTML = tech.map(s=>`<li>${s}</li>`).join('') || '<li>'+placeholders.technicalSkills+'</li>';
      }

      // Languages list
      const langs6 = els('languages6');
      if (langs6) {
        if (Array.isArray(resumeData.languages) && resumeData.languages.length>0) {
          langs6.innerHTML = resumeData.languages.map(l => `<li>${(l.name||'').trim()}${l.level? ' — '+l.level : ''}</li>`).join('');
        } else {
          langs6.innerHTML = `<li>${placeholders.languages}</li>`;
        }
      }

      // Right side content: about, experience, projects, certs
      const about6 = els('about6'); if(about6) about6.textContent = resumeData.summary || placeholders.summary;
      const exp6 = els('exp6'); if(exp6) exp6.innerHTML = (Array.isArray(resumeData.experience) && resumeData.experience.length>0) ? resumeData.experience.map(e=>`<div style="margin-bottom:8px"><strong>${e.title||placeholders.experienceTitle}</strong><div class="small-muted">${e.description ? formatBulletPoints(e.description) : placeholders.experienceDesc}</div></div>`).join('') : `<div class="small-muted">${placeholders.experienceDesc}</div>`;
      const proj6 = els('proj6'); if(proj6) proj6.innerHTML = (Array.isArray(resumeData.projects) && resumeData.projects.length>0) ? resumeData.projects.map(p=>`<div style="margin-bottom:8px"><strong>${p.title||placeholders.projectTitle}</strong><div class="small-muted">${p.description ? formatBulletPoints(p.description) : placeholders.projectDesc}</div></div>`).join('') : `<div class="small-muted">${placeholders.projectDesc}</div>`;
    const cert6 = els('cert6'); if(cert6) cert6.innerHTML = resumeData.certsAwards ? resumeData.certsAwards.split(';').map(s=>`<div>${s.trim()}</div>`).join('') : `<div class="small-muted">${placeholders.certsAwards}</div>`;
    // ensure preview is fitted after update
    try{ if(typeof fitResumeToPreview === 'function') fitResumeToPreview(); }catch(e){}
  }

  // Fit the resume element into the preview container by scaling
  function fitResumeToPreview() {
    const preview = els('previewArea');
    const resumeEl = document.querySelector('.preview .resume');
    if (!preview || !resumeEl) return;
    // available width/height inside preview (subtract padding)
    const style = window.getComputedStyle(preview);
    const padTop = parseFloat(style.paddingTop) || 0;
    const padBottom = parseFloat(style.paddingBottom) || 0;
    const padLeft = parseFloat(style.paddingLeft) || 0;
    const padRight = parseFloat(style.paddingRight) || 0;
    const availW = Math.max(20, preview.clientWidth - padLeft - padRight - 12); // small margin
    const availH = Math.max(20, preview.clientHeight - padTop - padBottom - 12);
    // resume natural size in pixels: convert mm to px using 96dpi approximation (1in = 25.4mm; 96px/in)
    const mmToPx = mm => mm * (96 / 25.4);
    const resumeW = mmToPx(210); // A4 width
    const resumeH = mmToPx(297); // A4 height
    // compute scale to fit inside both dims
    const scale = Math.min(availW / resumeW, availH / resumeH, 1);
    // Ensure transform-origin is centered to avoid clipping on small screens
    resumeEl.style.transformOrigin = 'center top';
    resumeEl.style.transform = `scale(${scale})`;
    // Allow resume to be scrollable when scaled smaller than 1 and its rendered height exceeds viewport
    resumeEl.style.maxHeight = `${resumeH}px`;
  }

  // Centralize template selection behavior to avoid inconsistent visibility
  function applyTemplateSelection() {
    const tpl = resumeData.templateSelect || 'classic';
    const resumeEl = els('resume');
    const tpl6 = els('template6');
    if (resumeEl) resumeEl.className = `resume tpl-${tpl}`;
    if (tpl6) tpl6.className = `resume tpl-${tpl}`;
    if (tpl6 && resumeEl) {
      if (tpl === 'professional') {
        tpl6.style.display = 'block';
        resumeEl.style.display = 'none';
      } else {
        tpl6.style.display = 'none';
        resumeEl.style.display = 'block';
      }
    }
  }

  // Function to render input fields for dynamic sections
  function renderDynamicInputs(sectionType) {
    const container = els(`${sectionType}Section`);
    const addButton = container.querySelector('.btn-add');
    // Clear all inputs before re-rendering, but keep the Add button
    container.querySelectorAll('.dynamic-item').forEach(item => item.remove());

    resumeData[sectionType].forEach((item, index) => {
      const div = document.createElement('div');
      div.className = 'dynamic-item';
      div.innerHTML = `
        <button type="button" class="btn-remove" data-section="${sectionType}" data-index="${index}"><i class="fas fa-times"></i></button>
        <label>${sectionType === 'education' ? 'Institution / Degree' : sectionType === 'experience' ? 'Role / Company' : 'Project Title'}</label>
        <input type="text" id="${sectionType}_${index}_title" data-section="${sectionType}" data-index="${index}" data-field="title" placeholder="${sectionType === 'education' ? 'e.g., University Name — Degree, 2021-2025' : sectionType === 'experience' ? 'e.g., Intern — Company, Jan-May 2025' : 'e.g., Resume Builder — HTML/CSS/JS'}" value="${item.title || ''}" />
        <label>${sectionType === 'education' ? 'Details / Achievements' : 'Description (use newlines for bullet points)'}</label>
        <textarea id="${sectionType}_${index}_description" data-section="${sectionType}" data-index="${index}" data-field="description" placeholder="${sectionType === 'education' ? 'CGPA, awards, key courses, 2-3 lines' : sectionType === 'experience' ? 'Developed X, leading teams, improved Y by Z%' : 'Brief project summary with outcomes'}">${item.description || ''}</textarea>
      `;

      addButton.insertAdjacentElement('beforebegin', div);
    });

    // Attach remove handlers
    container.querySelectorAll('.btn-remove').forEach(btn => {
      btn.addEventListener('click', (e) => {
        const sec = btn.getAttribute('data-section');
        const idx = Number(btn.getAttribute('data-index'));
        resumeData[sec].splice(idx,1);
        saveToStorage();
        renderDynamicInputs(sec);
        updatePreview();
      });
    });

    // Attach change handlers
    container.querySelectorAll('input, textarea').forEach(input => {
      input.addEventListener('input', (e) => {
        const sec = input.getAttribute('data-section');
        const idx = Number(input.getAttribute('data-index'));
        const field = input.getAttribute('data-field');
        resumeData[sec][idx][field] = input.value;
        saveToStorage();
        updatePreview();
      });
    });
  }

  // ---------- Languages: structured list with proficiency ----------
  function renderLanguages() {
    const container = els('languagesSection');
    if(!container) return;
    const addButton = container.querySelector('.btn-add');
    // Remove existing language items before re-rendering
    container.querySelectorAll('.lang-item').forEach(n => n.remove());

    resumeData.languages.forEach((lang, idx) => {
      const div = document.createElement('div');
      div.className = 'lang-item dynamic-item';
      div.innerHTML = `
        <button type="button" class="btn-remove" data-section="languages" data-index="${idx}"><i class="fas fa-times"></i></button>
        <label>Language</label>
        <input type="text" id="language_${idx}_name" data-section="languages" data-index="${idx}" data-field="name" placeholder="e.g., English" value="${lang.name || ''}" />
        <label>Proficiency</label>
        <select id="language_${idx}_level" data-section="languages" data-index="${idx}" data-field="level">
          <option value="">Select level</option>
          <option value="Basic">Basic</option>
          <option value="Intermediate">Intermediate</option>
          <option value="Advanced">Advanced</option>
          <option value="Fluent">Fluent</option>
          <option value="Native">Native</option>
        </select>
      `;

      addButton.insertAdjacentElement('beforebegin', div);

      // Set selected level after inserting (to avoid missing option)
      const sel = div.querySelector('select');
      if(sel && lang.level) sel.value = lang.level;
    });

    // Remove handlers
    container.querySelectorAll('.btn-remove').forEach(btn => {
      btn.addEventListener('click', () => {
        const idx = Number(btn.getAttribute('data-index'));
        resumeData.languages.splice(idx,1);
        saveToStorage();
        renderLanguages();
        updatePreview();
      });
    });

    // Input handlers
    container.querySelectorAll('input, select').forEach(input => {
      input.addEventListener('input', () => {
        const idx = Number(input.getAttribute('data-index'));
        const field = input.getAttribute('data-field');
        if(typeof resumeData.languages[idx] !== 'object') resumeData.languages[idx] = {name:'', level:''};
        resumeData.languages[idx][field] = input.value;
        saveToStorage();
        updatePreview();
      });
    });
  }

  function addLanguage() {
    resumeData.languages.push({name:'', level:''});
    saveToStorage();
    renderLanguages();
    updatePreview();
  }

  // Add new item to a dynamic section
  function addDynamicItem(sectionType) {
    resumeData[sectionType].push({title:'', description:''});
    saveToStorage();
    renderDynamicInputs(sectionType);
    updatePreview();
  }

  // Save to localStorage
  function saveToStorage() {
    try{
      localStorage.setItem(STORAGE_KEY, JSON.stringify(resumeData));
    }catch(e){
      console.warn('Could not save to localStorage', e);
    }
  }

  // Load from localStorage
  function loadFromStorage() {
    try{
      const raw = localStorage.getItem(STORAGE_KEY);
      if(raw){
        const parsed = JSON.parse(raw);
        // Merge saved data into resumeData
        resumeData = Object.assign(resumeData, parsed);
        // Migration: if languages is a string in stored data, convert to array
        if (typeof parsed.languages === 'string') {
          const s = parsed.languages.trim();
          if (s === '') resumeData.languages = [];
          else {
            // items might be in the form "English — Fluent" or comma separated
            const parts = s.split(',').map(p => p.trim()).filter(Boolean);
            resumeData.languages = parts.map(p => {
              // try to split on '—' or '-' to get level
              const m = p.split(/—|-/).map(x=>x.trim());
              if (m.length >= 2) return {name: m[0], level: m[1]};
              return {name: p, level: ''};
            });
          }
        }
      }
    }catch(e){
      console.warn('Could not load from localStorage', e);
    }
  }

  // Clear all data
  function clearAll() {
    resumeData = {
      name: '', email:'', phone:'', location:'', links:'', summary:'', education:[], experience:[], projects:[], technicalSkills:'', softSkills:'', languages:[], photo:'', certsAwards:'', templateSelect:'classic'
    };
    saveToStorage();
    hydrateInputs();
    renderDynamicInputs('education');
    renderDynamicInputs('experience');
    renderDynamicInputs('projects');
    updatePreview();
  }

  // Hydrate inputs from resumeData
  function hydrateInputs() {
    els('name').value = resumeData.name || '';
  // title field removed
    els('email').value = resumeData.email || '';
    els('phone').value = resumeData.phone || '';
    els('location').value = resumeData.location || '';
    els('links').value = resumeData.links || '';
    els('summary').value = resumeData.summary || '';
    els('technicalSkills').value = resumeData.technicalSkills || '';
    els('softSkills').value = resumeData.softSkills || '';
    // languages rendered via renderLanguages()
    els('certsAwards').value = resumeData.certsAwards || '';
    els('templateSelect').value = resumeData.templateSelect || 'classic';

    // Render dynamic inputs for arrays
    renderDynamicInputs('education');
    renderDynamicInputs('experience');
    renderDynamicInputs('projects');
    // Render languages UI
    if(!Array.isArray(resumeData.languages)) resumeData.languages = [];
    renderLanguages();

    // Photo preview in controls
    const photoPreview = els('photoPreview');
    if (photoPreview) {
      photoPreview.innerHTML = '';
      if (resumeData.photo) {
        const img = document.createElement('img');
        img.src = resumeData.photo;
        img.style.width = '80px';
        img.style.height = '80px';
        img.style.objectFit = 'cover';
        img.style.borderRadius = '8px';
        photoPreview.appendChild(img);
      }
    }
  }

  // Download as PDF using html2pdf
  function downloadPDF() {
    // Apply template class
    const tpl = resumeData.templateSelect || 'classic';
    // Choose which element to export based on selected template
    let sourceEl = els('resume');
    if (tpl === 'professional') {
      const tpl6 = els('template6');
      if (tpl6) sourceEl = tpl6;
    }

    // Ensure the exported element has the right class for template-specific CSS
    if (sourceEl && sourceEl.classList) sourceEl.className = `resume tpl-${tpl}`;

    const filenameBase = buildFilename({name: resumeData.name, title: '', format: 'name', addDateSuffix:true});
    const opt = {
      margin:       10,
      filename:     filenameBase,
      image:        { type: 'jpeg', quality: 0.98 },
      html2canvas:  { scale: 2 },
      jsPDF:        { unit: 'mm', format: 'a4', orientation: 'portrait' }
    };
    if (sourceEl) html2pdf().set(opt).from(sourceEl).save();
  }

  // Attach main event handlers
  function attachHandlers() {
    // Simple inputs
    ['name','email','phone','location','links','summary','technicalSkills','softSkills','certsAwards'].forEach(id => {
      const el = els(id);
      if(!el) return;
      el.addEventListener('input', (e) => {
        resumeData[id] = el.value;
        saveToStorage();
        updatePreview();
      });
    });

    // Template select
    els('templateSelect').addEventListener('change', (e) => {
      resumeData.templateSelect = e.target.value;
      saveToStorage();
      // Use centralized template selection logic and refresh preview
      applyTemplateSelection();
      updatePreview();
      try{ if(typeof fitResumeToPreview === 'function') fitResumeToPreview(); }catch(e){}
    });

    // Add buttons
    document.querySelectorAll('.btn-add').forEach(btn => {
      const sec = btn.getAttribute('data-section');
      if(sec === 'languages') {
        btn.addEventListener('click', () => addLanguage());
      } else {
        btn.addEventListener('click', () => addDynamicItem(sec));
      }
    });

    // Photo input handlers
    const photoInput = els('photoInput');
    const removePhotoBtn = els('removePhotoBtn');
    if (photoInput) {
      photoInput.addEventListener('change', (e) => {
        const file = e.target.files && e.target.files[0];
        if (!file) return;
        const reader = new FileReader();
        reader.onload = function(ev) {
          resumeData.photo = ev.target.result;
          saveToStorage();
          hydrateInputs();
          updatePreview();
          try{ if(typeof fitResumeToPreview === 'function') fitResumeToPreview(); }catch(e){}
        };
        reader.readAsDataURL(file);
      });
    }
    if (removePhotoBtn) {
      removePhotoBtn.addEventListener('click', () => {
        resumeData.photo = '';
        saveToStorage();
        hydrateInputs();
        updatePreview();
        try{ if(typeof fitResumeToPreview === 'function') fitResumeToPreview(); }catch(e){}
      });
    }

    // Save, Clear, Download
    els('saveBtn').addEventListener('click', () => {
      saveToStorage();
      // Non-blocking save confirmation
      console.log('Saved locally');
    });

    els('clearBtn').addEventListener('click', () => {
      if(confirm('Clear all data? This cannot be undone.')) clearAll();
    });

    els('downloadBtn').addEventListener('click', () => downloadPDF());

    // Preview-only toggle (hides side panel and centers A4 preview)
    const previewToggleBtn = els('previewToggleBtn');
    if (previewToggleBtn) {
      previewToggleBtn.addEventListener('click', () => {
        const appEl = document.querySelector('.app');
        if (!appEl) return;
        const enabled = appEl.classList.toggle('preview-only');
        previewToggleBtn.textContent = enabled ? 'Exit preview' : 'Preview only';
        // Restore icon + text styling
        const icon = document.createElement('i');
        icon.className = 'fas fa-eye';
        previewToggleBtn.insertAdjacentElement('afterbegin', icon);
        try{ setTimeout(()=>{ if(typeof fitResumeToPreview === 'function') fitResumeToPreview(); }, 140); }catch(e){}
        // show temporary hint when entering preview-only
        if (enabled && typeof showPreviewHint === 'function') showPreviewHint();
      });
    }

  // Filename format fixed to Name (date appended)
  }

    // Self-test functionality removed per user request

  // Initialize app
  function init() {
    loadFromStorage();
    hydrateInputs();
    attachHandlers();
    updatePreview();
    try{ setTimeout(()=>{ if(typeof fitResumeToPreview === 'function') fitResumeToPreview(); }, 100); }catch(e){}
  }

  // Run init on DOMContentLoaded
  document.addEventListener('DOMContentLoaded', init);
  
  // Re-fit on window resize
  window.addEventListener('resize', () => {
    try{ if(typeof fitResumeToPreview === 'function') fitResumeToPreview(); }catch(e){}
  });

  // Show a small temporary overlay hint when entering preview-only
  function showPreviewHint(duration=3000){
    const el = document.getElementById('previewHint');
    if(!el) return;
    el.classList.add('show');
    el.setAttribute('aria-hidden','false');
    clearTimeout(el._hideTimer);
    el._hideTimer = setTimeout(()=>{
      el.classList.remove('show');
      el.setAttribute('aria-hidden','true');
    }, duration);
  }

  // Escape key should exit preview-only mode
  window.addEventListener('keydown', (e)=>{
    if(e.key === 'Escape' || e.key === 'Esc'){
      const appEl = document.querySelector('.app');
      if(appEl && appEl.classList.contains('preview-only')){
        appEl.classList.remove('preview-only');
        const btn = document.getElementById('previewToggleBtn');
        if(btn) btn.textContent = 'Preview only';
        try{ if(typeof fitResumeToPreview === 'function') fitResumeToPreview(); }catch(e){}
      }
    }
  });

  // Filename preview removed per user request
  </script>
</body>
</html>
